# -*- coding: utf-8 -*-
"""Assignments: Data Structures in Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xgAAXbePnxA5h0cLgnNng7G1gd4C_shg

#1. Write a code to reverse a string
"""

st = input("Enter a string")
ans = ""
for i in range(len(st)-1,-1,-1):
  ans += (st[i])

print(ans)

"""#2. Write a code to count the number of vowels in a string."""

st2 = input("Enter a string")
cnt=0
for x in st2:
  if x=='a'or x=='e' or x=='i' or x=='o' or  x=='u':
    cnt+=1
print("number of vowel is ",cnt)

"""#3. Write a code to check if a given string is a palindrome or not"""

st3 = input("Enter a string")
s=0
e=len(st3)-1
flag=0
while s<e:
  if st3[s]!=st3[e]:
    flag=1
  s+=1
  e-=1
if(flag==0):
  print("it is a Palindrom")
else:
  print("it is not a Palindrom")

"""#4. Write a code to check if two given strings are anagrams of each other"""

st1 = input("Enter 1st string")
st2 = input("Enter 2nd string")
n_st1 = sorted(st1)
n_st2 = sorted(st2)

if(n_st1 == n_st2):
  print("strings are anagrams")
else:
  print("strings are not anagrams")

"""#5. Write a code to find all occurrences of a given substring within another string."""

st1 = input("Enter 1st string")
st2 = input("Enter 2nd string")
ans = []
s=0
n=len(st1)
while s<n:
  s = st1.find(st2,s)
  if s==-1:
    break
  ans.append(s)
  s+=1
print(ans)

"""#6. Write a code to perform basic string compression using the counts of repeated characters"""

st1 = "aaaabbchhtt"
ans = ""
cnt =1
import builtins
for i in range(1,len(st1)):
  if st1[i-1]==st1[i]:
    cnt+=1
  else:
    ans+= st1[i-1]+builtins.str(cnt)
    cnt=1
ans+=st1[-1]+builtins.str(cnt)
if len(ans)>=len(st1):
  print(st1)
else:
  print(ans)

"""#7. Write a code to determine if a string has all unique characters"""

st1 = "banana"
from collections import Counter
char_cnt = dict(Counter(st1))
flag =0
for count in char_cnt.values():
    if count > 1:
        flag = 1
        break
if(flag==0):
  print("string has all unique characters")
else:
  print("string has not all unique characters")

"""#8. Write a code to convert a given string to uppercase or lowercase"""

st1 = input("Enter a string")
upper_case = st1.upper()
print("UPPER_CASE:",upper_case)
lower_case = st1.lower()
print("lower_case:",lower_case)

"""#9. Write a code to count the number of words in a string"""

st1 ="Today is a very Pleasant day"
n=len(st1)
cnt =0
for i in range(n):
  if st1[i]==' ':
    cnt+=1
print("number of words in a string:",cnt+1)

"""#10. Write a code to concatenate two strings without using the + operator"""

st1 = "Goyal"
st2 = "Raj"
new_st = "{}{}".format(st1,st2)
print(new_st)

"""#11. Write a code to remove all occurrences of a specific element from a list"""

list_1 = [1, 2, 2, 4, 4, 5, 6, 7, 7]
element = 2
list_1 = [x for x in list_1 if x != element]
print(list_1)

"""# 12.Implement a code to find the second largest number in a given list of integers"""

list_2 = [1,3,4,4,57,45,2,78]
maxi = -9999999
for i in list_2:
    if i > maxi:
        maxi = i
list_2.remove(maxi)
maxi = -9999999
for i in list_2:
    if i > maxi:
        maxi = i
print(maxi)

"""#13. Create a code to count the occurrences of each element in a list and return a dictionary with elements as keys and their counts as values

"""

my_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
count_dict = {}

for num in my_list:
    if num in count_dict:
        count_dict[num] += 1
    else:
        count_dict[num] = 1

print(count_dict)

"""# 14. Write a code to reverse a list in-place without using any built-in reverse functions"""

lst = [4,3,45,28,7,8]
left, right = 0, len(lst) - 1
while left < right:
        lst[left], lst[right] = lst[right], lst[left]
        left += 1
        right -= 1
print(lst)

"""#15. Implement a code to find and remove duplicates from a list while preserving the original order of elements

"""

list_m = [3,4,3,5,5,6,7,8,56]
s = set()
list_n = []

for item in list_m:
    if item not in s:
        s.add(item)
        list_n.append(item)

print(list_n)

"""#16. Create a code to check if a given list is sorted (either in ascending or descending order) or not"""

list_b = [7,34,21,3,56,9]
list_a = sorted(list_b)
list_d = sorted(list_b,reverse=True)
if list_b == list_a or list_b==list_d:
  print("list is sorted")
else:
  print("list is not sorted")

"""#17. Write a code to merge two sorted lists into a single sorted list"""

list_1 = [3,4,5,12,25,36]
list_2 = [1,6,15,18,56]
i,j=0,0
m=len(list_1)
n=len(list_2)
ans = []
while i<m and j<n:
  if list_1[i]<list_2[j]:
    ans.append(list_1[i])
    i+=1
  else:
    ans.append(list_2[j])
    j+=1
if i<m:
  ans+=list_1[i:]
if j<n:
  ans+=list_2[j:]
print(ans)

"""#18. Implement a code to find the intersection of two given lists"""

list1 = [1, 2, 3, 4, 5]
list2 = [3, 4, 5, 6, 7]
list_n = list(set(list1) & set(list2))
print(list_n)

"""#19. Create a code to find the union of two lists without duplicates"""

list1 = [1, 2, 3, 4, 5]
list2 = [3, 4, 5, 6, 7]
list_n = list(set(list1) | set(list2))
print(list_n)

"""#20. Write a code to shuffle a given list randomly without using any built-in shuffle functions"""

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
n = len(arr)
import random
for i in range(n - 1, 0, -1):
  j = random.randint(0, i)
  arr[i], arr[j] = arr[j], arr[i]

print(arr)

"""# 21. Write a code that takes two tuples as input and returns a new tuple containing elements that are common to both input tuples

"""

t1 = tuple(map(int,input("Enter elements seperated by space ").split()))
t2 = tuple(map(int,input("Enter elements seperated by space ").split()))
s1 = set(t1)
s2 = set(t2)
t3 = tuple(s1 & s2)
print(t3)

"""#22. Create a code that prompts the user to enter two sets of integers separated by commas. Then, print the intersection of these two sets

"""

s1 = set(map(int,input("Enter elements seperated by commas ").split(",")))
s2 = set(map(int,input("Enter elements seperated by commas ").split(",")))
print(s1 & s2)

"""#23. Write a code to concatenate two tuples. The function should take two tuples as input and return a new tuple containing elements from both input tuples

"""

t1 = tuple(map(int,input("Enter the element seperated by space ").split()))
t2 = tuple(map(int,input("Enter the element seperated by space ").split()))
t3 = t1+t2
print(t3)

"""#24. Develop a code that prompts the user to input two sets of strings. Then, print the elements that are present in the first set but not in the second set

"""

s1 = set(input("Enter elements of the first set separated by space: ").split())
s2 = set(input("Enter elements of the second set separated by space: ").split())
print(s1-s2)

"""#25. Create a code that takes a tuple and two integers as input. The function should return a new tuple containing elements from the original tuple within the specified range of indices

"""

t1 = tuple(map(int,input("Enter elements seperated by space ").split()))
i = int(input("Enter the starting index"))
j = int(input("Enter the ending index"))
t2 = []
for k in range(i,j):
  t2.append(t1[k])
t2 = tuple(t2)
print(t2)

"""#26. Write a code that prompts the user to input two sets of characters. Then, print the union of these two sets"""

s1 = set(input("Enter elements of set seperated by space ").split())
s2 = set(input("Enter elements of set seperated by space ").split())
s3 = s1 | s2
print(s3)

"""#27. Develop a code that takes a tuple of integers as input. The function should return the maximum and minimum values from the tuple using tuple unpacking

"""

t1 = tuple(map(int, input("Enter the element seperated by space ").split()))
maxi,mini = max(t1),min(t1)
print(maxi,mini)

"""#28. Create a code that defines two sets of integers. Then, print the union, intersection, and difference of these two sets

"""

s1 = {2,3,4,11,15}
s2 = {1,2,3,5,17,11}
print(s1 | s2)
print(s1 & s2)
print(s1 - s2)

"""#29. Write a code that takes a tuple and an element as input. The function should return the count of occurrences of the given element in the tuple

"""

t1 = tuple(input("Enter the element seperated by space ").split())
element = input("Enter the element ")
print(t1.count(element))

"""#30. Develop a code that prompts the user to input two sets of strings. Then, print the symmetric difference of these two sets

"""

s1 = set(input("Enter elements of set seperated by space ").split())
s2 = set(input("Enter elements of set seperated by space ").split())
print(s1 ^ s2)

"""#31. Write a code that takes a list of words as input and returns a dictionary where the keys are unique words and the values are the frequencies of those words in the input list

"""

lis = input("Enter the element seperated by space ").split()
dic = {}
for i in lis:
  if i in dic:
    dic[i]+=1
  else:
    dic[i]=1
print(dic)

"""#32. Write a code that takes two dictionaries as input and merges them into a single dictionary. If there are common keys, the values should be added together

"""

def take_input():
  n = int(input("Enter the number of key-value pairs: "))
  d={}
  for _ in range(n):
    key = input("Enter the key: ")
    value = int(input("Enter the value: "))
    d[key] = value
  return d

def merge_dictionaries(d1, d2):
  merged_dict = d1.copy()
  for key, value in d2.items():
    if key in merged_dict:
      merged_dict[key] += value
    else:
      merged_dict[key] = value
  return merged_dict
print("Enter first dictionary")
d1 = take_input()
print("Enter second dictionary")
d2 = take_input()
result = merge_dictionaries(d1, d2)
print("Merged dictionary:", result)

"""#33. Write a code to access a value in a nested dictionary. The function should take the dictionary and a list of keys as input, and return the corresponding value. If any of the keys do not exist in the dictionary, the function should return None


"""

def fetch_nested_value(dictionary, key_path):
    temp = dictionary
    for key in key_path:
        if isinstance(temp, dict) and key in temp:
            temp = temp[key]
        else:
            return None
    return temp


data = {
    "alpha": {
        "beta": {
            "gamma": 42
        },
        "delta": 100
    },
    "m": {
        "n": "world"
    }
}


path_1 = ["alpha", "beta", "gamma"]
path_2 = ["m", "n"]
path_3 = ["alpha", "zeta"]


print(fetch_nested_value(data, path_1))
print(fetch_nested_value(data, path_2))
print(fetch_nested_value(data, path_3))

"""#34. Write a code that takes a dictionary as input and returns a sorted version of it based on the values. You can choose whether to sort in ascending or descending order

"""

n = int(input("Enter the number of key-value pairs: "))
d={}
for _ in range(n):
  key = input("Enter the key: ")
  value = int(input("Enter the value: "))
  d[key] = value
d2 = sorted(d.items(), key=lambda x: x[1])
print(dict(d2))

"""#35. Write a code that inverts a dictionary, swapping keys and values. Ensure that the inverted dictionary correctly handles cases where multiple keys have the same value by storing the keys as a list in the inverted dictionary.


"""

def invert_dict(d):
    inverted = {}
    for key, value in d.items():
        if value in inverted:
            inverted[value].append(key)
        else:
            inverted[value] = [key]
    return inverted


original_dict = {
    'apple': 1,
    'banana': 2,
    'cherry': 1,
    'date': 3,
    'elderberry': 2
}

inverted_dict = invert_dict(original_dict)
print(inverted_dict)